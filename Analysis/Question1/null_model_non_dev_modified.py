# -*- coding: utf-8 -*-
"""null_model_non_dev.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1wU38YMm1e3QFqn3Beak2qyV0xOXQ-0p8
"""

# Commented out IPython magic to ensure Python compatibility.
# import bct
# import csv
# import math
# import numpy as np
import networkx as nx
# import matplotlib.pyplot as plt
import matplotlib as mpl
# %matplotlib inline
# Python magic command that allows us to render the plots in our notebook rather than dumping

# change defaults to be less ugly
mpl.rc('xtick', labelsize=14, color="#222222")
mpl.rc('ytick', labelsize=14, color="#222222")
mpl.rc('font', **{'family':'sans-serif','sans-serif':['Arial']})
mpl.rc('font', size=16)
mpl.rc('xtick.major', size=6, width=1)
mpl.rc('xtick.minor', size=3, width=1)
mpl.rc('ytick.major', size=6, width=1)
mpl.rc('ytick.minor', size=3, width=1)
mpl.rc('axes', linewidth=1, edgecolor="#222222", labelcolor="#222222")
mpl.rc('text', usetex=False, color="#222222")

G_nonDev = nx.Graph()
G_Dev = nx.Graph()

with open('data/nonDevDepNodeList.csv', 'r') as file:
    for line in file:
        id, label, dependencies = line.strip().split('	')

        deps = dependencies.split(",")
        deps = [x for x in deps if (']' and '[') not in x]
        deps = [x.replace('"', '') for x in deps]
        deps = [x.replace("'", '') for x in deps]
        deps = [x.replace(" ", '') for x in deps]
        deps = [x.replace("]", '') for x in deps]
        G_nonDev.add_node(id, label=label, dependencies=deps)

with open('data/nonDevDepEdgeList.csv', 'r') as file:
    next(file)

    for line in file:
        source, target, weight, label = line.strip().split('	')

        deps = label.split(",")
        # deps = [x for x in deps if ('}' and '{') not in x]
        deps = [x.replace('"', '') for x in deps]
        deps = [x.replace("'", '') for x in deps]
        deps = [x.replace(" ", '') for x in deps]
        deps = [x.replace("}", '') for x in deps]
        deps = [x.replace("{", '') for x in deps]

        G_nonDev.add_edge(source, target)

        # print(f'{source}, {target}, {weight}, {deps}')
        G_nonDev[source][target]['weight'] = float(weight)
        G_nonDev[source][target]['label'] = deps

G_nonDev_null = nx.to_numpy_array(G_nonDev)

"""### Here are the Louvain Communities"""

comp_nonDev = nx.community.louvain_communities(G_nonDev)
print(type(comp_nonDev))

comp_nonDev_weights = nx.community.louvain_communities(G_nonDev, weight='weight')
print(type(comp_nonDev_weights))

max_len = 0
for i in range(len(comp_nonDev)):
    if len(comp_nonDev[i]) > max_len:
        max_len = len(comp_nonDev[i])
        community_nonDev = comp_nonDev[i]
    print(len(comp_nonDev[i]), end=", ")
print("\n")

top_indexes = []
for i in range(len(comp_nonDev)):
    length = len(comp_nonDev[i])
    top_indexes.append((i, length))

sorted_top_ten = sorted(top_indexes, key=lambda x : x[1], reverse=True)[:10]

print(sorted_top_ten)
with open("top_communities.txt", "w") as cmFile:
    for index, top_index in enumerate(sorted_top_ten):
        index_community = top_index[0]
        for repo in comp_nonDev[index_community]:
            cmFile.write(f"{repo}\t\t{index+1}\n")


# max_len = 0
# for i in range(len(comp_nonDev_weights)):
#     if len(comp_nonDev_weights[i]) > max_len:
#         max_len = len(comp_nonDev_weights[i])
#         community_nonDev = comp_nonDev_weights[i]
#     print(len(comp_nonDev_weights[i]), end=", ")

# print(community_nonDev)
# N = len(G_nonDev)

# # p value at which giant component (of size log(n) nodes) is expected
# p_giant_nonDev = 1.0 / (N - 1)
# # p value at which graph is expected to become completely connected
# p_conn_nonDev = math.log(N) / N

# # identify largest connected component | link: https://networkx.org/documentation/stable/auto_examples/graphviz_layout/plot_giant_component.html
# Rcc_nonDev = sorted(nx.connected_components(G_nonDev), key=len, reverse=True)
# Giant_nonDev = G_nonDev.subgraph(Rcc_nonDev[0])

# print(len(Giant_nonDev))

# # random_G_dev, rewires = bct.randmio_und_signed(G_Dev_null, 5)
# G_Dev_null_np = nx.to_numpy_array(Giant_nonDev)

# print(G_Dev_null_np)

# C = np.mean(list(nx.clustering(Giant_nonDev).values()))
# d = nx.average_shortest_path_length(Giant_nonDev)
# print(f'{C},{d}')

# C_weights = np.mean(list(nx.clustering(Giant_nonDev,weight="weight").values()))
# d_weights = nx.average_shortest_path_length(Giant_nonDev,weight="weight")
# print(f'{C},{d}')

# import random
# import time

# nonDev_Clustering_Null = []
# nonDev_Clustering_weight_Null = []

# time_limit = 21600  # for example, 10 seconds

# start_time = time.time()

# # Set the seed based on current time
# random.seed(int(time.time()))
# # Generate a random number
# random_number = round(((random.random()) * 100))

# G_nonDev_null = bct.null_model_und_sign(G_Dev_null_np, seed=random_number)